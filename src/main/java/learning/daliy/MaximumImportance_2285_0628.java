package learning.daliy;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

/**
 * 2285. Maximum Total Importance of Roads
 *
 * You are given an integer n denoting the number of cities in a country.
 * The cities are numbered from 0 to n - 1.
 *
 * You are also given a 2D integer array roads where roads[i] = [ai, bi] denotes that there exists a bidirectional road connecting cities ai and bi.
 *
 * You need to assign each city with an integer value from 1 to n, where each value can only be used once.
 * The importance of a road is then defined as the sum of the values of the two cities it connects.
 *
 * Return the maximum total importance of all roads possible after assigning the values optimally.
 */
public class MaximumImportance_2285_0628 {
    public static long maximumImportance(int n, int[][] roads) {

        HashMap<Integer, Integer> hashMap = new HashMap<>();
        for(int i = 0; i < roads.length; i++) {
            hashMap.put(roads[i][0], hashMap.getOrDefault(roads[i][0], 0) + 1);
            hashMap.put(roads[i][1], hashMap.getOrDefault(roads[i][1], 0) + 1);
        }
        List<Entry<Integer, Integer>> list = new ArrayList<>(hashMap.entrySet());
        list = list.stream().sorted((o1, o2) -> o2.getValue() - o1.getValue()).collect(Collectors.toList());

        Map<Integer, Integer> importance = new HashMap<>();
        for(int i = 0; i < list.size(); i++) {
            importance.put(list.get(i).getKey(), i + 1);
        }

        long result = 0;
        for(int i = 0; i < roads.length; i++) {
            result += (importance.get(roads[i][0]) + importance.get(roads[i][1]));
        }
        return result;

    }

    public static long maximumImportance0(int n, int[][] roads) {
        int max = -1;
        for(int i = 0; i < roads.length; i++) {
            max = Math.max(max, Math.max(roads[i][0], roads[i][1]));
        }

        int[] count = new int[50001];
        for(int i = 0; i < roads.length; i++) {
            count[roads[i][0]]++;
            count[roads[i][1]]++;
        }

        Arrays.sort(count);
        long result = 0L;
        for (int i = count.length - 1; i >= 0; i--) {
            result += (long) count[i] * n;
            n--;
        }
        return result;
    }



    public static void main(String[] args) {
        System.out.println("===============test 1===============");
        int[][] roads = new int[][]{{0,1},{0,2},{0,3},{0,4},{0,5},{0,6},{0,7},{0,8},{0,9},{0,10},{0,11},{0,12},{0,13},{0,14},{0,15},{0,16},{0,17},{0,18},{0,19},{0,20},{0,21},{0,22},{0,23},{0,24},{0,25},{0,26},{0,27},{0,28},{0,29},{0,30},{0,31},{0,32},{0,33},{0,34},{0,35},{0,36},{0,37},{0,38},{0,39},{0,40},{0,41},{0,42},{0,43},{0,44},{0,45},{0,46},{0,47},{0,48},{0,49},{0,50},{0,51},{0,52},{0,53},{0,54},{0,55},{0,56},{0,57},{0,58},{0,59},{0,60},{0,61},{0,62},{0,63},{0,64},{0,65},{0,66},{0,67},{0,68},{0,69},{0,70},{0,71},{0,72},{0,73},{0,74},{0,75},{0,76},{0,77},{0,78},{0,79},{0,80},{0,81},{0,82},{0,83},{0,84},{0,85},{0,86},{0,87},{0,88},{0,89},{0,90},{0,91},{0,92},{0,93},{0,94},{0,95},{0,96},{0,97},{0,98},{0,99},{0,100},{0,101},{0,102},{0,103},{0,104},{0,105},{0,106},{0,107},{0,108},{0,109},{0,110},{0,111},{0,112},{0,113},{0,114},{0,115},{0,116},{0,117},{0,118},{0,119},{0,120},{0,121},{0,122},{0,123},{0,124},{0,125},{0,126},{0,127},{0,128},{0,129},{0,130},{0,131},{0,132},{0,133},{0,134},{0,135},{0,136},{0,137},{0,138},{0,139},{0,140},{0,141},{0,142},{0,143},{0,144},{0,145},{0,146},{0,147},{0,148},{0,149},{0,150},{0,151},{0,152},{0,153},{0,154},{0,155},{0,156},{0,157},{0,158},{0,159},{0,160},{0,161},{0,162},{0,163},{0,164},{0,165},{0,166},{0,167},{0,168},{0,169},{0,170},{0,171},{0,172},{0,173},{0,174},{0,175},{0,176},{0,177},{0,28302},{0,28303},{0,28304},{0,28305},{0,28306},{0,28307},{0,28308},{0,28309},{0,28310},{0,28311},{0,28312},{0,28313},{0,28314},{0,28315},{0,28316},{0,28317},{0,28318},{0,28319},{0,28320},{0,28321},{0,28322},{0,28323},{0,28324},{0,28325},{0,28326},{0,28327},{0,28328},{0,28329},{0,28330},{0,28331},{0,28332},{0,28333},{0,28334},{0,28335},{0,28336},{0,28337},{0,28338},{0,28339},{0,28340},{0,28341},{0,28342},{0,28343},{0,28344},{0,28345},{0,28346},{0,28347},{0,28348},{0,28349},{0,28350},{0,28351},{0,28352},{0,28353},{0,28354},{0,28355},{0,28356},{0,28357},{0,28358},{0,28359},{0,28360},{0,28361},{0,28362},{0,28363},{0,28364},{0,28365},{0,28366},{0,28367},{0,28368},{0,28369},{0,28370},{0,28371},{0,28372},{0,28373},{0,28374},{0,28375},{0,28376},{0,28377},{0,28378},{0,28379},{0,28380},{0,28381},{0,28382},{0,28383},{0,28384},{0,28385},{0,28386},{0,28387},{0,28388},{0,28389},{0,28390},{0,28391},{0,28392},{0,28393},{0,28394},{0,28395},{0,28396},{0,28397},{0,28398},{0,28399},{0,28400},{0,28401},{0,28402},{0,28403},{0,28404},{0,28405},{0,28406},{0,28407},{0,28408},{0,28409},{0,28410},{0,28411},{0,28412},{0,28413},{0,28414},{0,28415},{0,28416},{0,28417},{0,28418},{0,28419},{0,28420},{0,28421},{0,28422},{0,28423},{0,28424},{0,28425},{0,28426},{0,28427},{0,28428},{0,28429},{0,28430},{0,28431},{0,28432},{0,28433},{0,28434},{0,28435},{0,28436},{0,28437},{0,28438},{0,28439},{0,28440},{0,28441},{0,28442},{0,28443},{0,28444},{0,28445},{0,28446},{0,28447},{0,28448},{0,28449},{0,28450},{0,28451},{0,28452},{0,28453},{0,28454},{0,28455},{0,28456},{0,28457},{0,28458},{0,28459},{0,28460},{0,28461},{0,28462},{0,28463},{0,28464},{0,28465},{0,28466},{0,28467},{0,28468},{0,28469},{0,28470},{0,28471},{0,28472},{0,28473},{0,28474},{0,28475},{0,28476},{0,28477},{0,28478},{0,28479},{0,28480},{0,28481},{0,28482},{0,28483},{0,28484},{0,28485},{0,28486},{0,28487},{0,28488},{0,28489},{0,28490},{0,28491},{0,28492},{0,28493},{0,28494},{0,28495},{0,28496},{0,28497},{0,28498},{0,28499},{0,28500},{0,28501},{0,28502},{0,28503},{0,28504},{0,28505},{0,28506},{0,28507},{0,28508},{0,28509},{0,28510},{0,28511},{0,28512},{0,28513},{0,28514},{0,28515},{0,28516},{0,28517},{0,28518},{0,28519},{0,28520},{0,28521},{0,28522},{0,28523},{0,28524},{0,28525},{0,28526},{0,28527},{0,28528},{0,28529},{0,28530},{0,28531},{0,28532},{0,28533},{0,28534},{0,28535},{0,28536},{0,28537},{0,28538},{0,28539},{0,28540},{0,28541},{0,28542},{0,28543},{0,28544},{0,28545},{0,28546},{0,28547},{0,28548},{0,28549},{0,28550},{0,28551},{0,28552},{0,28553},{0,28554},{0,28555},{0,28556},{0,28557},{0,28558},{0,28559},{0,28560},{0,28561},{0,28562},{0,28563},{0,28564},{0,28565},{0,28566},{0,28567},{0,28568},{0,28569},{0,28570},{0,28571},{0,28572},{0,28573},{0,28574},{0,28575},{0,28576},{0,28577},{0,28578},{0,28579},{0,28580},{0,28581},{0,28582},{0,28583},{0,28584},{0,28585},{0,28586},{0,28587},{0,28588},{0,28589},{0,28590},{0,28591},{0,28592},{0,28593},{0,28594},{0,28595},{0,28596},{0,28597},{0,28598},{0,28599},{0,28600},{0,28601},{0,28602},{0,28603},{0,28604},{0,28605},{0,28606},{0,28607},{0,28608},{0,28609},{0,28610},{0,28611},{0,28612},{0,28613},{0,28614},{0,28615},{0,28616},{0,28617},{0,28618},{0,28619},{0,28620},{0,28621},{0,28622},{0,28623},{0,28624},{0,28625},{0,28626},{0,28627},{0,28628},{0,28629},{0,28630},{0,28631},{0,28632},{0,28633},{0,28634},{0,28635},{0,28636},{0,28637},{0,28638},{0,28639},{0,28640},{0,28641},{0,28642},{0,28643},{0,28644},{0,28645},{0,28646},{0,28647},{0,28648},{0,28649},{0,28650},{0,28651},{0,28652},{0,28653},{0,28654},{0,28655},{0,28656},{0,28657},{0,28658},{0,28659},{0,28660},{0,28661},{0,28662},{0,28663},{0,28664},{0,28665},{0,28666},{0,28667},{0,28668},{0,28669},{0,28670},{0,28671},{0,28672},{0,28673},{0,28674},{0,28675},{0,28676},{0,28677},{0,28678},{0,28679},{0,28680},{0,28681},{0,28682},{0,28683},{0,28684},{0,28685},{0,28686},{0,28687},{0,28688},{0,28689},{0,28690},{0,28691},{0,28692},{0,28693},{0,28694},{0,28695},{0,28696},{0,28697},{0,28698},{0,28699},{0,28700},{0,28701},{0,28702},{0,28703},{0,28704},{0,28705},{0,28706},{0,28707},{0,28708},{0,28709},{0,28710},{0,28711},{0,28712},{0,28713},{0,28714},{0,28715},{0,28716},{0,28717},{0,28718},{0,28719},{0,28720},{0,28721},{0,28722},{0,28723},{0,28724},{0,28725},{0,28726},{0,28727},{0,28728},{0,28729},{0,28730},{0,28731},{0,28732},{0,28733},{0,28734},{0,28735},{0,28736},{0,28737},{0,28738},{0,28739},{0,28740},{0,28741},{0,28742},{0,28743},{0,28744},{0,28745},{0,28746},{0,28747},{0,28748},{0,28749},{0,28750},{0,28751},{0,28752},{0,28753},{0,28754},{0,28755},{0,28756},{0,28757},{0,28758},{0,28759},{0,28760},{0,28761},{0,28762},{0,28763},{0,28764},{0,28765},{0,28766},{0,28767},{0,28768},{0,28769},{0,28770},{0,28771},{0,28772},{0,28773},{0,28774},{0,28775},{0,28776},{0,28777},{0,28778},{0,28779},{0,28780},{0,28781},{0,28782},{0,28783},{0,28784},{0,28785},{0,28786},{0,28787},{0,28788},{0,28789},{0,28790},{0,28791},{0,28792},{0,28793},{0,28794},{0,28795},{0,28796},{0,28797},{0,28798},{0,28799},{0,28800},{0,28801},{0,28802},{0,28803},{0,28804},{0,28805},{0,28806},{0,28807},{0,28808},{0,28809},{0,28810},{0,28811},{0,28812},{0,28813},{0,28814},{0,28815},{0,28816},{0,28817},{0,28818},{0,28819},{0,28820},{0,28821},{0,28822},{0,28823},{0,28824},{0,28825},{0,28826},{0,28827},{0,28828},{0,28829},{0,49845},{0,49846},{0,49847},{0,49848},{0,49849},{0,49850},{0,49851},{0,49852},{0,49853},{0,49854},{0,49855},{0,49856},{0,49857},{0,49858},{0,49859},{0,49860},{0,49861},{0,49862},{0,49863},{0,49864},{0,49865},{0,49866},{0,49867},{0,49868},{0,49869},{0,49870},{0,49871},{0,49872},{0,49873},{0,49874},{0,49875},{0,49876},{0,49877},{0,49878},{0,49879},{0,49880},{0,49881},{0,49882},{0,49883},{0,49884},{0,49885},{0,49886},{0,49887},{0,49888},{0,49889},{0,49890},{0,49891},{0,49892},{0,49893},{0,49894},{0,49895},{0,49896},{0,49897},{0,49898},{0,49899},{0,49900},{0,49901},{0,49902},{0,49903},{0,49904},{0,49905},{0,49906},{0,49907},{0,49908},{0,49909},{0,49910},{0,49911},{0,49912},{0,49913},{0,49914},{0,49915},{0,49916},{0,49917},{0,49918},{0,49919},{0,49920},{0,49921},{0,49922},{0,49923},{0,49924},{0,49925},{0,49926},{0,49927},{0,49928},{0,49929},{0,49930},{0,49931},{0,49932},{0,49933},{0,49934},{0,49935},{0,49936},{0,49937},{0,49938},{0,49939},{0,49940},{0,49941},{0,49942},{0,49943},{0,49944},{0,49945},{0,49946},{0,49947},{0,49948},{0,49949},{0,49950},{0,49951},{0,49952},{0,49953},{0,49954},{0,49955},{0,49956},{0,49957},{0,49958},{0,49959},{0,49960},{0,49961},{0,49962},{0,49963},{0,49964},{0,49965},{0,49966},{0,49967},{0,49968},{0,49969},{0,49970},{0,49971},{0,49972},{0,49973},{0,49974},{0,49975},{0,49976},{0,49977},{0,49978},{0,49979},{0,49980},{0,49981},{0,49982},{0,49983},{0,49984},{0,49985},{0,49986},{0,49987},{0,49988},{0,49989},{0,49990},{0,49991},{0,49992},{0,49993},{0,49994},{0,49995},{0,49996},{0,49997},{0,49998},{0,49999},{1,2}};
        System.out.println("result 1 = " + maximumImportance0(50000, roads));
    }

}
